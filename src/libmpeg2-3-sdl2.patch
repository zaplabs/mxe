From 7b4b14f7f82edb7f772cceb163762e57d3d1c147 Mon Sep 17 00:00:00 2001
From: Jeffrey Clark <dude@zaplabs.com>
Date: Fri, 22 Apr 2016 15:16:09 -0500
Subject: [PATCH 1/2] sdl2 support

---
 configure.ac          |   6 +--
 libvo/video_out_sdl.c | 127 ++++++++++++++++++--------------------------------
 2 files changed, 48 insertions(+), 85 deletions(-)

diff --git a/configure.ac b/configure.ac
index 954466a..de1cee8 100644
--- a/configure.ac
+++ b/configure.ac
@@ -204,11 +204,11 @@ esac
 dnl check for SDL
 AC_ARG_ENABLE([sdl],[  --disable-sdl           make a version not using SDL])
 if test x"$enable_sdl" != x"no"; then
-    AC_CHECK_PROG([SDLCONFIG],[sdl-config],[yes])
+    AC_CHECK_PROG([SDLCONFIG],[sdl2-config],[yes])
     if test x"$SDLCONFIG" = x"yes"; then
         AC_DEFINE([LIBVO_SDL],,[libvo SDL support])
-        LIBVO_CFLAGS="$LIBVO_CFLAGS `sdl-config --cflags`"
-        LIBVO_LIBS="$LIBVO_LIBS `sdl-config --libs`"
+        LIBVO_CFLAGS="$LIBVO_CFLAGS `sdl2-config --cflags`"
+        LIBVO_LIBS="$LIBVO_LIBS `sdl2-config --libs`"
     fi
 fi
 
diff --git a/libvo/video_out_sdl.c b/libvo/video_out_sdl.c
index 34931e6..6825d9c 100644
--- a/libvo/video_out_sdl.c
+++ b/libvo/video_out_sdl.c
@@ -31,7 +31,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <SDL/SDL.h>
+#include <SDL.h>
 #include <inttypes.h>
 
 #include "video_out.h"
@@ -41,72 +41,43 @@ typedef struct {
     vo_instance_t vo;
     int width;
     int height;
-    SDL_Surface * surface;
-    Uint32 sdlflags;
-    Uint8 bpp;
+    int chroma_width;
+    int chroma_height;
+    SDL_Window * window;
+    SDL_Texture * texture;
+    SDL_Renderer * renderer;
 } sdl_instance_t;
 
-static void sdl_setup_fbuf (vo_instance_t * _instance,
-			    uint8_t ** buf, void ** id)
-{
-    sdl_instance_t * instance = (sdl_instance_t *) _instance;
-    SDL_Overlay * overlay;
-
-    *id = overlay = SDL_CreateYUVOverlay (instance->width, instance->height,
-					  SDL_YV12_OVERLAY, instance->surface);
-    buf[0] = overlay->pixels[0];
-    buf[1] = overlay->pixels[2];
-    buf[2] = overlay->pixels[1];
-    if (((long)buf[0] & 15) || ((long)buf[1] & 15) || ((long)buf[2] & 15)) {
-	fprintf (stderr, "Unaligned buffers. Anyone know how to fix this ?\n");
-	exit (1);
-    }
-}
-
-static void sdl_start_fbuf (vo_instance_t * instance,
-			    uint8_t * const * buf, void * id)
-{
-    SDL_LockYUVOverlay ((SDL_Overlay *) id);
-}
-
 static void sdl_draw_frame (vo_instance_t * _instance,
-			    uint8_t * const * buf, void * id)
+                            uint8_t * const * buf, void * id)
 {
     sdl_instance_t * instance = (sdl_instance_t *) _instance;
-    SDL_Overlay * overlay = (SDL_Overlay *) id;
     SDL_Event event;
 
     while (SDL_PollEvent (&event))
-	if (event.type == SDL_VIDEORESIZE)
-	    instance->surface =
-		SDL_SetVideoMode (event.resize.w, event.resize.h,
-				  instance->bpp, instance->sdlflags);
-    SDL_DisplayYUVOverlay (overlay, &(instance->surface->clip_rect));
-}
-
-static void sdl_discard (vo_instance_t * _instance,
-			 uint8_t * const * buf, void * id)
-{
-    SDL_UnlockYUVOverlay ((SDL_Overlay *) id);
+        if (event.type == SDL_WINDOWEVENT_RESIZED)
+            SDL_SetWindowSize(instance->window, event.window.data1, event.window.data2);
+    SDL_UpdateYUVTexture(instance->texture, NULL,
+        buf[0], instance->width,
+        buf[1], instance->chroma_width,
+        buf[2], instance->chroma_width);
+    SDL_RenderClear(instance->renderer);
+    SDL_RenderCopy(instance->renderer, instance->texture, NULL, NULL);
+    SDL_RenderPresent(instance->renderer);
 }
 
-#if 0
 static void sdl_close (vo_instance_t * _instance)
 {
-    sdl_instance_t * instance;
-    int i;
+    sdl_instance_t * instance = (sdl_instance_t *) _instance;
 
-    instance = (sdl_instance_t *) _instance;
-    for (i = 0; i < 3; i++)
-	SDL_FreeYUVOverlay (instance->frame[i].overlay);
-    SDL_FreeSurface (instance->surface);
+    SDL_DestroyTexture (instance->texture);
+    SDL_DestroyRenderer (instance->renderer);
     SDL_QuitSubSystem (SDL_INIT_VIDEO);
 }
-#endif
 
 static int sdl_setup (vo_instance_t * _instance, unsigned int width,
-		      unsigned int height, unsigned int chroma_width,
-		      unsigned int chroma_height, vo_setup_result_t * result)
+                      unsigned int height, unsigned int chroma_width,
+                      unsigned int chroma_height, vo_setup_result_t * result)
 {
     sdl_instance_t * instance;
 
@@ -114,13 +85,25 @@ static int sdl_setup (vo_instance_t * _instance, unsigned int width,
 
     instance->width = width;
     instance->height = height;
-    instance->surface = SDL_SetVideoMode (width, height, instance->bpp,
-					  instance->sdlflags);
-    if (! (instance->surface)) {
-	fprintf (stderr, "sdl could not set the desired video mode\n");
-	return 1;
+    instance->chroma_width = chroma_width;
+    instance->chroma_height = chroma_height;
+
+    instance->window = SDL_CreateWindow("SDL",
+                              SDL_WINDOWPOS_UNDEFINED,
+                              SDL_WINDOWPOS_UNDEFINED,
+                              width, height,
+                              SDL_WINDOW_SHOWN|SDL_WINDOW_RESIZABLE);
+    if (! (instance->window)) {
+        fprintf (stderr, "sdl could not create window: %s\n", SDL_GetError());
+        return 1;
     }
 
+    instance->renderer = SDL_CreateRenderer(instance->window, -1, 0);
+
+    instance->texture = SDL_CreateTexture (instance->renderer,
+            SDL_PIXELFORMAT_YV12, SDL_TEXTUREACCESS_STREAMING,
+            instance->width, instance->height);
+
     result->convert = NULL;
     return 0;
 }
@@ -128,42 +111,22 @@ static int sdl_setup (vo_instance_t * _instance, unsigned int width,
 vo_instance_t * vo_sdl_open (void)
 {
     sdl_instance_t * instance;
-    const SDL_VideoInfo * vidInfo;
 
     instance = (sdl_instance_t *) malloc (sizeof (sdl_instance_t));
     if (instance == NULL)
-	return NULL;
+        return NULL;
 
     instance->vo.setup = sdl_setup;
-    instance->vo.setup_fbuf = sdl_setup_fbuf;
+    instance->vo.setup_fbuf = NULL;
     instance->vo.set_fbuf = NULL;
-    instance->vo.start_fbuf = sdl_start_fbuf;
-    instance->vo.discard = sdl_discard;
+    instance->vo.start_fbuf = NULL;
+    instance->vo.discard = NULL;
     instance->vo.draw = sdl_draw_frame;
-    instance->vo.close = NULL; /* sdl_close; */
-    instance->sdlflags = SDL_HWSURFACE | SDL_RESIZABLE;
-
-    putenv((char *)"SDL_VIDEO_YUV_HWACCEL=1");
-    putenv((char *)"SDL_VIDEO_X11_NODIRECTCOLOR=1");
+    instance->vo.close = sdl_close;
 
     if (SDL_Init (SDL_INIT_VIDEO)) {
-	fprintf (stderr, "sdl video initialization failed.\n");
-	return NULL;
-    }
-
-    vidInfo = SDL_GetVideoInfo ();
-    if (!SDL_ListModes (vidInfo->vfmt, SDL_HWSURFACE | SDL_RESIZABLE)) {
-	instance->sdlflags = SDL_RESIZABLE;
-	if (!SDL_ListModes (vidInfo->vfmt, SDL_RESIZABLE)) {
-	    fprintf (stderr, "sdl couldn't get any acceptable video mode\n");
-	    return NULL;
-	}
-    }
-    instance->bpp = vidInfo->vfmt->BitsPerPixel;
-    if (instance->bpp < 16) {
-	fprintf(stderr, "sdl has to emulate a 16 bit surfaces, "
-		"that will slow things down.\n");
-	instance->bpp = 16;
+        fprintf (stderr, "sdl video initialization failed.\n");
+        return NULL;
     }
 
     return (vo_instance_t *) instance;
-- 
2.8.0

